service:  serverless-note-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    JWKS_URL: https://dev-1x060-89.us.auth0.com/.well-known/jwks.json
    NOTE_DYNAMO_TABLE: noteItems-${self:provider.stage}
    NOTE_ID_DYNAMO_INDEX: noteIdIndex
    FILES_S3_BUCKET: serverless-note-app-bucket-658616507787-${self:provider.stage}
    FILE_UPLOAD_URL_EXPIRATION: 300
    FILE_DOWNLOAD_URL_EXPIRATION: 604800

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetNotes:
    handler: src/lambda/http/getNotes.handler
    events:
      - http:
          method: get
          path: notes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}
      - Effect: Allow
        Action:
          - s3:HeadObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*

  CreateNote:
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          method: post
          path: notes
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}

  UpdateNote:
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          method: patch
          path: notes/{noteId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}/index/${self:provider.environment.NOTE_ID_DYNAMO_INDEX}

  DeleteNote:
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{noteId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}/index/${self:provider.environment.NOTE_ID_DYNAMO_INDEX}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: notes/{noteId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_DYNAMO_TABLE}/index/${self:provider.environment.NOTE_ID_DYNAMO_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*

resources:
  Resources:
    noteItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTE_DYNAMO_TABLE}
        BillingMode: PAY_PER_REQUEST

        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S

        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE

        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.NOTE_ID_DYNAMO_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: noteId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

